import logging
import asyncio
import re
from aiogram import Bot, Dispatcher, types, Router, F
from aiogram.filters import Command
import aiohttp

TOKEN = "7556682563:AAHrBsND0a5c2pkl69iMaE-4yPtFVkUrnaE"
MAX_ANIME = 55
SHIKIMORI_URL = "https://shikimori.one/api"

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

bot = Bot(token=TOKEN)
router = Router()

MONTH_NAMES = {
    1: "—è–Ω–≤–∞—Ä—è", 2: "—Ñ–µ–≤—Ä–∞–ª—è", 3: "–º–∞—Ä—Ç–∞", 4: "–∞–ø—Ä–µ–ª—è",
    5: "–º–∞—è", 6: "–∏—é–Ω—è", 7: "–∏—é–ª—è", 8: "–∞–≤–≥—É—Å—Ç–∞",
    9: "—Å–µ–Ω—Ç—è–±—Ä—è", 10: "–æ–∫—Ç—è–±—Ä—è", 11: "–Ω–æ—è–±—Ä—è", 12: "–¥–µ–∫–∞–±—Ä—è"
}

STATUS_TRANSLATION = {
    "released": "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ",
    "ongoing": "üü° –í—ã—Ö–æ–¥–∏—Ç",
    "anons": "üîµ –ê–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞–Ω–æ"
}

async def get_seasons(anime_id: int) -> list:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—Å–µ—Ö —Å–µ–∑–æ–Ω–∞—Ö"""
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(
                f"{SHIKIMORI_URL}/animes/{anime_id}/related",
                headers={"User-Agent": "AnimeSeasonsBot/3.0"}
            ) as response:
                related = await response.json()
                seasons = []
                
                # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–∏–∫–≤–µ–ª—ã
                for item in related:
                    if item["relation"] == "sequel" and item["anime"]:
                        seasons.append(item["anime"])
                
                # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Å–µ–∑–æ–Ω
                async with session.get(
                    f"{SHIKIMORI_URL}/animes/{anime_id}",
                    headers={"User-Agent": "AnimeSeasonsBot/3.0"}
                ) as resp:
                    main = await resp.json()
                    seasons.insert(0, main)
                
                return sorted(seasons, key=lambda x: x.get('aired_on', '9999-99-99'))
    except Exception as e:
        logger.error(f"Seasons error: {str(e)}")
        return []

def format_date(date_str: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –Ω–∞ —Ä—É—Å—Å–∫–æ–º"""
    try:
        year, month, day = map(int, date_str.split('-'))
        return f"{day} {MONTH_NAMES.get(month, '???')} {year}"
    except:
        return "–î–∞—Ç–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞"

def format_season(season: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ–∑–æ–Ω–µ"""
    name = season.get('russian') or season.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
    episodes = season.get('episodes', '?')
    status = STATUS_TRANSLATION.get(season.get('status'), "‚ö™ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    
    dates = []
    if aired_on := season.get('aired_on'):
        dates.append(f"‚ñ∂Ô∏è –ù–∞—á–∞–ª–æ: {format_date(aired_on)}")
    if released_on := season.get('released_on'):
        dates.append(f"‚èπÔ∏è –ö–æ–Ω–µ—Ü: {format_date(released_on)}")
    
    return (
        f"üåê {name}\n"
        f"‚î£ {status}\n"
        f"‚î£ –≠–ø–∏–∑–æ–¥–æ–≤: {episodes}\n"
        f"‚îó {' | '.join(dates) if dates else 'üìÖ –î–∞—Ç—ã –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã'}"
    )

async def process_anime(title: str) -> str:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ –∞–Ω–∏–º–µ"""
    try:
        async with aiohttp.ClientSession() as session:
            # –ü–æ–∏—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∞–Ω–∏–º–µ
            async with session.get(
                f"{SHIKIMORI_URL}/animes",
                params={"search": title, "limit": 1},
                headers={"User-Agent": "AnimeSeasonsBot/3.0"}
            ) as resp:
                data = await resp.json()
                if not data:
                    return f"‚ùå {title} - –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
                
                main = data[0]
                seasons = await get_seasons(main['id'])
                
                result = [f"üéå **{main.get('russian', main['name'])}**"]
                for i, season in enumerate(seasons, 1):
                    result.append(f"\nüìÄ –°–µ–∑–æ–Ω {i}\n{format_season(season)}")
                
                return '\n'.join(result)
                
    except Exception as e:
        logger.error(f"Error: {str(e)}")
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {title}"

@router.message(Command("start"))
async def start_command(message: types.Message):
    await message.answer(
        "üîç –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ –∞–Ω–∏–º–µ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–ª–∏ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏)\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "–ê—Ç–∞–∫–∞ —Ç–∏—Ç–∞–Ω–æ–≤, –ú–∞–≥–∏—á–µ—Å–∫–∞—è –±–∏—Ç–≤–∞\n"
        "–ß–µ–ª–æ–≤–µ–∫-–±–µ–Ω–∑–æ–ø–∏–ª–∞"
    )

@router.message(F.text)
async def handle_message(message: types.Message):
    anime_list = re.split(r'[\n,;]+', message.text)
    anime_list = [t.strip() for t in anime_list if t.strip()][:MAX_ANIME]
    
    if not anime_list:
        return await message.answer("‚ùå –°–ø–∏—Å–æ–∫ –∞–Ω–∏–º–µ –ø—É—Å—Ç")
    
    progress_msg = await message.answer(f"‚è≥ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É {len(anime_list)} –∞–Ω–∏–º–µ...")
    
    results = []
    for idx, title in enumerate(anime_list, 1):
        try:
            result = await process_anime(title)
            results.append(f"{idx}. {result}")
            
            if idx % 5 == 0:
                await progress_msg.edit_text(f"‚è≥ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {idx}/{len(anime_list)}")
                
            await asyncio.sleep(1)
            
        except Exception as e:
            logger.error(f"Error processing {title}: {str(e)}")
            results.append(f"{idx}. ‚ùå –û—à–∏–±–∫–∞: {title}")
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —á–∞—Å—Ç—è–º–∏
    full_report = "\n\n".join(results)
    parts = [full_report[i:i+4096] for i in range(0, len(full_report), 4096)]
    
    for part in parts:
        await message.answer(part)
    
    await progress_msg.delete()

async def main():
    dp = Dispatcher()
    dp.include_router(router)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())